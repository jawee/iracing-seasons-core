// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using iRacing_League_Scoring.Contexts;

namespace iRacingLeagueScoring.Migrations
{
    [DbContext(typeof(IRacingLeagueScoringContext))]
    [Migration("20181004153305_Update20181004")]
    partial class Update20181004
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.3-rtm-32065");

            modelBuilder.Entity("iRacing_League_Scoring.Models.Driver", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("CustomerId");

                    b.Property<string>("Name");

                    b.Property<int>("Number");

                    b.HasKey("Id");

                    b.ToTable("Drivers");
                });

            modelBuilder.Entity("iRacing_League_Scoring.Models.Race", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("RaceNumber");

                    b.Property<int>("RaceType");

                    b.Property<long>("SeasonId");

                    b.Property<string>("Track");

                    b.HasKey("Id");

                    b.HasIndex("SeasonId");

                    b.ToTable("Races");
                });

            modelBuilder.Entity("iRacing_League_Scoring.Models.RaceRow", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Car");

                    b.Property<long>("DriverId");

                    b.Property<int>("Incidents");

                    b.Property<int>("InfractionPoints");

                    b.Property<int>("PenaltyPoints");

                    b.Property<int>("Points");

                    b.Property<int>("Position");

                    b.Property<long>("RaceId");

                    b.Property<int>("StartPosition");

                    b.HasKey("Id");

                    b.HasIndex("DriverId");

                    b.HasIndex("RaceId");

                    b.ToTable("RaceRows");
                });

            modelBuilder.Entity("iRacing_League_Scoring.Models.Season", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("EndDate");

                    b.Property<string>("Name");

                    b.Property<DateTime>("StartDate");

                    b.HasKey("Id");

                    b.ToTable("Seasons");
                });

            modelBuilder.Entity("iRacing_League_Scoring.Models.Race", b =>
                {
                    b.HasOne("iRacing_League_Scoring.Models.Season", "Season")
                        .WithMany("Races")
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("iRacing_League_Scoring.Models.RaceRow", b =>
                {
                    b.HasOne("iRacing_League_Scoring.Models.Driver", "Driver")
                        .WithMany()
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("iRacing_League_Scoring.Models.Race", "Race")
                        .WithMany("RaceRows")
                        .HasForeignKey("RaceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
